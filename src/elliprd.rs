/*
 * Ellip is licensed under The 3-Clause BSD, see LICENSE.
 * Copyright 2025 Sira Pornsiriprasert <code@psira.me>
 * This code is translated from Boost Math.
 */

// Original header from Boost Math
//  Copyright (c) 2006 Xiaogang Zhang, 2015 John Maddock.
//  Copyright (c) 2024 Matt Borland
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//  History:
//  XZ wrote the original of this file as part of the Google
//  Summer of Code 2006.  JM modified it slightly to fit into the
//  Boost.Math conceptual framework better.
//  Updated 2015 to use Carlson's latest methods.
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

use std::{f64::consts::PI, mem::swap};

/// Compute [degenerate symmetric elliptic integral of the third kind](https://dlmf.nist.gov/19.16.E5).
/// ```text
///                     ∞                                        
///                 3  ⌠                   dt                   
/// RD(x, y, z)  =  ─  ⎮ ───────────────────────────────────────
///                 2  ⎮             ___________________________
///                    ⌡ (t + z) ⋅ ╲╱(t + x) ⋅ (t + y) ⋅ (t + z)
///                   0                                        
/// where x ≥ 0, y ≥ 0, and at most one can be zero. z > 0.
/// ```
///
pub fn elliprd(x: f64, y: f64, z: f64) -> Result<f64, &'static str> {
    if x.min(y) < 0.0 || x + y == 0.0 {
        return Err("elliprd: x and y must be non-negative, and at most one can be zero.");
    }
    if z <= 0.0 {
        return Err("elliprd: z must be positive");
    }

    let mut x = x;
    let mut y = y;

    // Special cases
    if x == z {
        swap(&mut x, &mut y);
    }
    if y == z {
        if x == y {
            return Ok(1.0 / (x * x.sqrt()));
        }
        if x == 0.0 {
            return Ok(3.0 * PI / (4.0 * y * y.sqrt()));
        }
    }
    if x == 0.0 {
        let x0 = y.sqrt();
        let y0 = z.sqrt();
        let mut xn = x0;
        let mut yn = y0;
        let mut sum = 0.0;
        let mut sum_pow = 0.25;

        while (xn - yn).abs() >= 2.7 * f64::EPSILON * xn.abs() {
            let t = (xn * yn).sqrt();
            xn = (xn + yn) / 2.0;
            yn = t;
            sum_pow *= 2.0;
            let temp = xn - yn;
            sum += sum_pow * temp * temp;
        }
        let rf = std::f64::consts::PI / (xn + yn);
        let pt = (x0 + 3.0 * y0) / (4.0 * z * (x0 + y0)) - sum / (z * (y - z));
        return Ok(pt * rf * 3.0);
    }

    let mut xn = x;
    let mut yn = y;
    let mut zn = z;
    let mut an = (x + y + 3.0 * z) / 5.0;
    let a0 = an;
    let mut q = (f64::EPSILON / 4.0).powf(-1.0 / 8.0) * (an - x).max(an - y).max(an - z) * 1.2;

    let mut fn_val = 1.0;
    let mut rd_sum = 0.0;

    for _ in 0..N_MAX_ITERATIONS {
        let rx = xn.sqrt();
        let ry = yn.sqrt();
        let rz = zn.sqrt();
        let lambda = rx * ry + rx * rz + ry * rz;
        rd_sum += fn_val / (rz * (zn + lambda));
        an = (an + lambda) / 4.0;
        xn = (xn + lambda) / 4.0;
        yn = (yn + lambda) / 4.0;
        zn = (zn + lambda) / 4.0;
        fn_val /= 4.0;
        q /= 4.0;
        if q < an {
            let x = fn_val * (a0 - x) / an;
            let y = fn_val * (a0 - y) / an;
            let z = -(x + y) / 3.0;
            let xyz = x * y * z;
            let z2 = z * z;
            let z3 = z2 * z;

            let e2 = x * y - 6.0 * z2;
            let e3 = 3.0 * xyz - 8.0 * z3;
            let e4 = 3.0 * (xyz - z3) * z;
            let e5 = xyz * z2;

            let result = fn_val
                * an.powf(-1.5)
                * (1.0 - 3.0 * e2 / 14.0 + e3 / 6.0 + 9.0 * e2 * e2 / 88.0
                    - 3.0 * e4 / 22.0
                    - 9.0 * e2 * e3 / 52.0
                    + 3.0 * e5 / 26.0
                    - e2 * e2 * e2 / 16.0
                    + 3.0 * e3 * e3 / 40.0
                    + 3.0 * e2 * e4 / 20.0
                    + 45.0 * e2 * e2 * e3 / 272.0
                    - 9.0 * (e3 * e4 + e2 * e5) / 68.0)
                + 3.0 * rd_sum;

            return Ok(result);
        }
    }
    Err("elliprd: Fail to converge.")
}

const N_MAX_ITERATIONS: usize = 50;

#[cfg(test)]
mod test {
    use super::*;
    use crate::compare_test_data;

    fn _elliprd(inp: &[f64]) -> f64 {
        elliprd(inp[0], inp[1], inp[2]).unwrap()
    }

    #[test]
    fn test_elliprd() {
        compare_test_data!("./tests/data/boost/ellint_rd_data.txt", _elliprd, 4.8e-16);
    }

    #[test]
    fn test_elliprd_0xy() {
        compare_test_data!("./tests/data/boost/ellint_rd_0xy.txt", _elliprd, 5.9e-16);
    }

    #[test]
    fn test_elliprd_0yy() {
        compare_test_data!("./tests/data/boost/ellint_rd_0yy.txt", _elliprd, 2.6e-16);
    }
    #[test]
    fn test_elliprd_xxx() {
        compare_test_data!("./tests/data/boost/ellint_rd_xxx.txt", _elliprd, 2.3e-16);
    }

    #[test]
    fn test_elliprd_xxz() {
        compare_test_data!("./tests/data/boost/ellint_rd_xxz.txt", _elliprd, 8e-16);
    }

    #[test]
    fn test_elliprd_xyy() {
        compare_test_data!("./tests/data/boost/ellint_rd_xyy.txt", _elliprd, 3.7e-15);
    }
}
