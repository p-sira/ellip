/*
 * Ellip is licensed under The 3-Clause BSD, see LICENSE.
 * Copyright 2025 Sira Pornsiriprasert <code@psira.me>
 * This code is translated from Boost Math.
 */

// Original header from Boost Math
//  Copyright (c) 2006 Xiaogang Zhang
//  Copyright (c) 2006 John Maddock
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//  History:
//  XZ wrote the original of this file as part of the Google
//  Summer of Code 2006.  JM modified it to fit into the
//  Boost.Math conceptual framework better, and to correctly
//  handle the various corner cases.
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

use std::f64::consts::PI;

use crate::{ellipk, elliprf, elliprj};

pub fn ellippi(v: f64, k: f64) -> Result<f64, &'static str> {
    // Compute vc = 1-v without cancellation errors
    let vc = 1.0 - v;
    _ellippi(v, k, vc)
}

#[inline]
fn _ellippi(v: f64, k: f64, vc: f64) -> Result<f64, &'static str> {
    if k.abs() >= 1.0 {
        return Err("function requires |k| <= 1");
    }
    if vc <= 0.0 {
        return Err("function requires v < 1");
    }

    if v == 0.0 {
        if k == 0.0 {
            return Ok(PI / 2.0);
        }
        return ellipk(k);
    }

    if v < 0.0 {
        // Apply A&S 17.7.17
        let k2 = k * k;
        let n = (k2 - v) / (1.0 - v);
        let nm1 = (1.0 - k2) / (1.0 - v);

        let mut result = _ellippi(n, k, nm1)?;
        // Split calculations to avoid overflow/underflow
        result *= -v / (1.0 - v);
        result *= (1.0 - k2) / (k2 - v);
        result += ellipk(k)? * k2 / (k2 - v);
        return Ok(result);
    }

    let x = 0.0;
    let y = 1.0 - k * k;
    let z = 1.0;
    let p = vc;

    let f = elliprf(x, y, z)?;
    let rj = elliprj(x, y, z, p)?;
    Ok(f + v * rj / 3.0)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::compare_test_data;

    fn ellippi_k(inp: &[f64]) -> f64 {
        ellippi(inp[0], inp[1]).unwrap()
    }

    #[test]
    fn test_ellippi() {
        compare_test_data!("./tests/data/boost/ellint_pi2_data.txt", ellippi_k, 1e-16);
    }
}
