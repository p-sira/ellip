/*
 * Ellip is licensed under The 3-Clause BSD, see LICENSE.
 * Copyright 2025 Sira Pornsiriprasert <code@psira.me>
 * This code is modified from Boost Math.
 */

// Ellipe modified how the function handles special cases by swapping
// the variables to arrange them first, then check against the special
// case conditions. 

// Original header from Boost Math
//  Copyright (c) 2006 Xiaogang Zhang, 2015 John Maddock
//  Copyright (c) 2024 Matt Borland
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//  History:
//  XZ wrote the original of this file as part of the Google
//  Summer of Code 2006.  JM modified it to fit into the
//  Boost.Math conceptual framework better, and to handle
//  types longer than 80-bit reals.
//  Updated 2015 to use Carlson's latest methods.
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

use std::{f64::consts::PI, mem::swap};

use crate::elliprc;

/// Compute [symmetric elliptic integral of the first kind](https://dlmf.nist.gov/19.16.E1).
/// ```text
///                     ∞                              
///                 1  ⌠             dt              
/// RF(x, y, z)  =  ─  ⎮ ───────────────────────────
///                 2  ⎮   ________________________
///                    ⌡ ╲╱(t + x) (t + y) (t + z)
///                   0                              
/// where x ≥ 0, y ≥ 0, z ≥ 0, and at most one can be zero.
/// ```
///
pub fn elliprf(x: f64, y: f64, z: f64) -> Result<f64, &'static str> {
    if x.min(y).min(z) < 0.0 || (y + z).min(x + y).min(x + z) < 0.0 {
        return Err("elliprf: x, y, and z must be non-negative, and at most one can be zero.");
    }
    let mut xn = x;
    let mut yn = y;
    let mut zn = z;
    // Arrange x < y < z before evaluating special cases
    // We can swap since RF is completely-symmetric
    if xn > yn {
        swap(&mut xn, &mut yn);
    }
    if yn > zn {
        swap(&mut yn, &mut zn);
    }
    if xn > yn {
        swap(&mut xn, &mut yn);
    }

    // Special cases from http://dlmf.nist.gov/19.20#i
    if xn == yn {
        if xn == zn {
            // RF(x,x,x)
            return Ok(1.0 / xn.sqrt());
        }

        if xn == 0.0 {
            // RF(0,0,z)
            return Ok(f64::INFINITY);
        }
    }

    if yn == zn {
        if xn == 0.0 {
            // RF(0,y,y)
            return Ok(PI / (2.0 * yn.sqrt()));
        }

        // RF(x,y,y)
        return elliprc(xn, yn);
    }

    if xn == 0.0 {
        let mut yn = yn.sqrt();
        let mut zn = zn.sqrt();

        while (yn - zn).abs() >= 2.7 * f64::EPSILON * yn.abs() {
            let t = (yn * zn).sqrt();
            yn = (yn + zn) / 2.0;
            zn = t;
        }
        return Ok(PI / (yn + zn));
    }

    let mut an = (xn + yn + zn) / 3.0;
    let a0 = an;
    let mut q = (3.0 * f64::EPSILON).powf(-1.0 / 8.0)
        * an.abs()
            .max((an - xn).abs())
            .max((an - yn).abs())
            .max((an - zn).abs());
    let mut fn_val = 1.0;
    let mut it = 0;
    for _ in 0..N_MAX_ITERATIONS {
        let root_x = xn.sqrt();
        let root_y = yn.sqrt();
        let root_z = zn.sqrt();

        let lambda = root_x * root_y + root_x * root_z + root_y * root_z;

        an = (an + lambda) / 4.0;
        xn = (xn + lambda) / 4.0;
        yn = (yn + lambda) / 4.0;
        zn = (zn + lambda) / 4.0;

        q /= 4.0;
        fn_val *= 4.0;

        if q < an.abs() {
            break;
        }
        it += 1;
    }
    if it == N_MAX_ITERATIONS {
        return Err("elliprf: Fail to converge.");
    }

    let x = (a0 - x) / (an * fn_val);
    let y = (a0 - y) / (an * fn_val);
    let z = -x - y;

    let e2 = x * y - z * z;
    let e3 = x * y * z;

    Ok((1.0
        + e3 * (1.0 / 14.0 + 3.0 * e3 / 104.0)
        + e2 * (-1.0 / 10.0 + e2 / 24.0 - (3.0 * e3) / 44.0 - 5.0 * e2 * e2 / 208.0
            + e2 * e3 / 16.0))
        / an.sqrt())
}

const N_MAX_ITERATIONS: usize = 11;

#[cfg(test)]
mod test {
    use super::*;
    use crate::compare_test_data;

    fn _elliprf(inp: &[f64]) -> f64 {
        elliprf(inp[0], inp[1], inp[2]).unwrap()
    }

    #[test]
    fn test_elliprf() {
        // The precision is at 5e-16 except for one test case, which relative error is 5.4e-16.
        // This seems to be due to Ellip swaps the variables first before evaluating, unlike in
        // Boost.
        compare_test_data!("./tests/data/boost/ellint_rf_data.txt", _elliprf, 5.4e-16);
    }
}
